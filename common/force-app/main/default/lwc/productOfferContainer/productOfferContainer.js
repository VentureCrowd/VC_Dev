/**
 * @description Controller class for all the Products Offers.
 * @dependencies productOfferContainer LWC
 * @createdBy Cesar
 * @createdDate 2024-08-29
 * @version 1.0
 */


import { LightningElement,track, api } from 'lwc';
import apex_retrieveProductOfferInformation from '@salesforce/apex/Product_V2_Controller.getProductOfferInformation';
import apex_retrieveEOIOfferInformation from '@salesforce/apex/EOI_Controller.getEoiOfferInformation';

export default class ProductOfferContainer extends LightningElement {

    @track productCardsInfo;
    @track allCards;
    @track mainCards;
    @track showMoreButtonText = 'Show More';
    @track showButton = false;
    @track isExpanded = false;
    @track status;
    @track lengthCards;
    @api isEOI;

    /**
     * Retrieves product offer information from the server using the Apex controller.
     * Parses the returned JSON data, adds an 'id' field to each item, and updates the component's data.
     * 
     * @returns {void}
     * @throws {Error} If an error occurs during the retrieval or parsing process.
     */
    async getProductOfferInformation(){
        try {
            let data = await apex_retrieveProductOfferInformation();
            let returnData = JSON.parse(data);

            // Iterate over all the object and decide if the banner should be autogenerated
            // or take it from the SF field
            returnData = returnData.map((item, index) => {
                item.bannerAuto = ((item.heroBannerURL !== null) && (item.logoURL !== null) && (item.bannerURL === null));

                if (item.bannerAuto) {
                    item.bannerURL = item.heroBannerURL;
                }

                return { ...item, id: index + 1 };
            });    
            this.mainCards = returnData.slice(0, 3);
            this.allCards = returnData;
            this.status = 'Raising Now';
            if(this.allCards.length > 3) {
                this.showButton = true;
            }
        } catch (error) {
            console.error('Error retrieving product offer information: ', error);
            throw error;
        }
    }

    /**
     * Retrieves EOI offer information from the server using the Apex controller.
     * Parses the returned JSON data, extracts the Banner and Logo URLs from the imagesUrl field,
     * adds an 'id' field to each item, and updates the component's data.
     * 
     * @async
     * @returns {Promise<Array>} A Promise that resolves with the parsed and processed EOI offer information.
     * @throws {Error} If an error occurs during the retrieval or parsing process.
     */
    async getEoiOfferInformation(){
        try {
            let data = await apex_retrieveEOIOfferInformation();
            let returnData = JSON.parse(data);
            returnData = returnData.map((item, index) => {
                // Parse the imagesUrl field which is a JSON string
                let imagesArray = JSON.parse(item.imagesUrl);

                // Extract the Banner and Logo URLs
                let bannerImage = imagesArray.find(image => image.title === "Banner")?.contentDownloadURL || '';
                let logoImage = imagesArray.find(image => image.title === "logo")?.contentDownloadURL || '';

                return {
                    ...item,
                    id: index + 1,
                    bannerURL: bannerImage,
                    logoURL: logoImage
                };
            });
            this.status = 'Express your interest now'
            this.mainCards = returnData.slice(0, 3);
            this.allCards = returnData;
            if(this.allCards.length > 3) {
                this.showButton = true;
            }
            return returnData;
        } catch (error) {
            console.error('Error retrieving EOI offer information: ', error);
            throw error;
        }
    }

    /**
     * Handles the show more/less button click event.
     * Expands or collapses the product cards and updates the button text accordingly.
     * Scrolls to the top of the product cards container when expanding.
     * 
     * @returns {void}
     */
    handleShowMoreButton() {
        const cardsContainer = this.template.querySelector('.product-container');

        if (!this.isExpanded && (this.mainCards.length >= 3)) {
            // When not expanded, show all cards and update button text
            this.mainCards = [...this.allCards]; 
            this.showMoreButtonText = 'Show Less';
        } else {
            // When expanded, show only the first 3 cards and update button text
            this.mainCards = this.allCards.slice(0, 3); 
            this.showMoreButtonText = 'Show More';
            // Scroll to the top of the product cards container
            cardsContainer.scrollIntoView({ behavior: 'smooth' });
        }
        // Toggle the expansion state
        this.isExpanded = !this.isExpanded; 
    }


    connectedCallback() {
        if (this.isEOI) {
            this.getEoiOfferInformation();
        } else {
            this.getProductOfferInformation();
        }
    }
}